declare module "cpp" {
    import * as UE from "ue"
    import * as cpp from "cpp"
    import {$Ref, $Nullable, cstring} from "puerts"

    class ImGuiStyle {
        Alpha: number;
        DisabledAlpha: number;
        WindowPadding: ImVec2;
    }

    class ImVec2 {
        constructor(p0: number, p1: number);
        constructor();
        x: number;
        y: number;
    }

    class ImVec4 {
        constructor(p0: number, p1: number, p2: number, p3: number);
        constructor();
        x: number;
        y: number;
        z: number;
        w: number;
    }

    class UnrealImGui {
        static NewFrame() :void;
        static EndFrame() :void;
        static Render() :void;
        static ShowDemoWindow(p0?: $Ref<boolean>) :void;
        static ShowMetricsWindow(p0?: $Ref<boolean>) :void;
        static ShowStackToolWindow(p0?: $Ref<boolean>) :void;
        static ShowAboutWindow(p0?: $Ref<boolean>) :void;
        static ShowStyleEditor(p0?: ImGuiStyle) :void;
        static ShowStyleSelector(p0: cstring) :boolean;
        static ShowFontSelector(p0: cstring) :void;
        static ShowUserGuide() :void;
        static GetVersion() :cstring;
        static StyleColorsDark(p0?: ImGuiStyle) :void;
        static StyleColorsLight(p0?: ImGuiStyle) :void;
        static StyleColorsClassic(p0?: ImGuiStyle) :void;
        static Begin(p0: cstring, p1?: $Ref<boolean>, p2?: number) :boolean;
        static End() :void;
        static BeginChild(p0: cstring, p1?: ImVec2, p2?: boolean, p3?: number) :boolean;
        static EndChild() :void;
        static IsWindowAppearing() :boolean;
        static IsWindowCollapsed() :boolean;
        static IsWindowFocused(p0?: number) :boolean;
        static IsWindowHovered(p0?: number) :boolean;
        static GetWindowPos() :ImVec2;
        static GetWindowSize() :ImVec2;
        static GetWindowWidth() :number;
        static GetWindowHeight() :number;
        static SetNextWindowPos(p0: ImVec2, p1?: number, p2?: ImVec2) :void;
        static SetNextWindowSize(p0: ImVec2, p1?: number) :void;
        static SetNextWindowContentSize(p0: ImVec2) :void;
        static SetNextWindowCollapsed(p0: boolean, p1?: number) :void;
        static SetNextWindowFocus() :void;
        static SetNextWindowBgAlpha(p0: number) :void;
        static SetWindowPos(p0: cstring, p1: ImVec2, p2?: number) :void;
        static SetWindowSize(p0: cstring, p1: ImVec2, p2?: number) :void;
        static SetWindowCollapsed(p0: cstring, p1: boolean, p2?: number) :void;
        static SetWindowFocus(p0: cstring) :void;
        static GetContentRegionAvail() :ImVec2;
        static GetContentRegionMax() :ImVec2;
        static GetWindowContentRegionMin() :ImVec2;
        static GetWindowContentRegionMax() :ImVec2;
        static GetScrollX() :number;
        static GetScrollY() :number;
        static SetScrollX(p0: number) :void;
        static SetScrollY(p0: number) :void;
        static GetScrollMaxX() :number;
        static GetScrollMaxY() :number;
        static SetScrollHereX(p0?: number) :void;
        static SetScrollHereY(p0?: number) :void;
        static SetScrollFromPosX(p0: number, p1?: number) :void;
        static SetScrollFromPosY(p0: number, p1?: number) :void;
        static PushStyleColor(p0: number, p1: ImVec4) :void;
        static PopStyleColor(p0?: number) :void;
        static PushStyleVar(p0: number, p1: number) :void;
        static PopStyleVar(p0?: number) :void;
        static PushAllowKeyboardFocus(p0: boolean) :void;
        static PopAllowKeyboardFocus() :void;
        static PushButtonRepeat(p0: boolean) :void;
        static PopButtonRepeat() :void;
        static PushItemWidth(p0: number) :void;
        static PopItemWidth() :void;
        static SetNextItemWidth(p0: number) :void;
        static CalcItemWidth() :number;
        static PushTextWrapPos(p0?: number) :void;
        static PopTextWrapPos() :void;
        static Separator() :void;
        static SameLine(p0?: number, p1?: number) :void;
        static NewLine() :void;
        static Spacing() :void;
        static Dummy(p0: ImVec2) :void;
        static Indent(p0?: number) :void;
        static Unindent(p0?: number) :void;
        static BeginGroup() :void;
        static EndGroup() :void;
        static GetCursorPos() :ImVec2;
        static GetCursorPosX() :number;
        static GetCursorPosY() :number;
        static SetCursorPos(p0: ImVec2) :void;
        static SetCursorPosX(p0: number) :void;
        static SetCursorPosY(p0: number) :void;
        static GetCursorStartPos() :ImVec2;
        static GetCursorScreenPos() :ImVec2;
        static SetCursorScreenPos(p0: ImVec2) :void;
        static AlignTextToFramePadding() :void;
        static GetTextLineHeight() :number;
        static GetTextLineHeightWithSpacing() :number;
        static GetFrameHeight() :number;
        static GetFrameHeightWithSpacing() :number;
        static PushID(p0: cstring) :void;
        static PopID() :void;
        static GetID(p0: cstring) :number;
        static TextUnformatted(p0: cstring, p1?: cstring) :void;
        static Text(p0: cstring) :void;
        static TextColored(p0: ImVec4, p1: cstring) :void;
        static TextDisabled(p0: cstring) :void;
        static TextWrapped(p0: cstring) :void;
        static LabelText(p0: cstring, p1: cstring) :void;
        static BulletText(p0: cstring) :void;
        static Button(p0: cstring, p1?: ImVec2) :boolean;
        static SmallButton(p0: cstring) :boolean;
        static InvisibleButton(p0: cstring, p1: ImVec2, p2?: number) :boolean;
        static ArrowButton(p0: cstring, p1: number) :boolean;
        static Image(p0: any, p1: ImVec2, p2?: ImVec2, p3?: ImVec2, p4?: ImVec4, p5?: ImVec4) :void;
        static ImageButton(p0: any, p1: ImVec2, p2?: ImVec2, p3?: ImVec2, p4?: number, p5?: ImVec4, p6?: ImVec4) :boolean;
        static Checkbox(p0: cstring, p1: $Ref<boolean>) :boolean;
        static CheckboxFlags(p0: cstring, p1: $Ref<number>, p2: number) :boolean;
        static RadioButton(p0: cstring, p1: boolean) :boolean;
        static ProgressBar(p0: number, p1?: ImVec2, p2?: cstring) :void;
        static Bullet() :void;
        static BeginCombo(p0: cstring, p1: cstring, p2?: number) :boolean;
        static EndCombo() :void;
        static Combo(p0: cstring, p1: $Ref<number>, p2: cstring, p3?: number) :boolean;
        static DragFloat(p0: cstring, p1: $Ref<number>, p2?: number, p3?: number, p4?: number, p5?: cstring, p6?: number) :boolean;
        static DragFloat2(p0: cstring, p1: $Ref<number>, p2?: number, p3?: number, p4?: number, p5?: cstring, p6?: number) :boolean;
        static DragFloat3(p0: cstring, p1: $Ref<number>, p2?: number, p3?: number, p4?: number, p5?: cstring, p6?: number) :boolean;
        static DragFloat4(p0: cstring, p1: $Ref<number>, p2?: number, p3?: number, p4?: number, p5?: cstring, p6?: number) :boolean;
        static DragFloatRange2(p0: cstring, p1: $Ref<number>, p2: $Ref<number>, p3?: number, p4?: number, p5?: number, p6?: cstring, p7?: cstring, p8?: number) :boolean;
        static DragInt(p0: cstring, p1: $Ref<number>, p2?: number, p3?: number, p4?: number, p5?: cstring, p6?: number) :boolean;
        static DragInt2(p0: cstring, p1: $Ref<number>, p2?: number, p3?: number, p4?: number, p5?: cstring, p6?: number) :boolean;
        static DragInt3(p0: cstring, p1: $Ref<number>, p2?: number, p3?: number, p4?: number, p5?: cstring, p6?: number) :boolean;
        static DragInt4(p0: cstring, p1: $Ref<number>, p2?: number, p3?: number, p4?: number, p5?: cstring, p6?: number) :boolean;
        static DragIntRange2(p0: cstring, p1: $Ref<number>, p2: $Ref<number>, p3?: number, p4?: number, p5?: number, p6?: cstring, p7?: cstring, p8?: number) :boolean;
        static SliderFloat(p0: cstring, p1: $Ref<number>, p2: number, p3: number, p4?: cstring, p5?: number) :boolean;
        static SliderFloat2(p0: cstring, p1: $Ref<number>, p2: number, p3: number, p4?: cstring, p5?: number) :boolean;
        static SliderFloat3(p0: cstring, p1: $Ref<number>, p2: number, p3: number, p4?: cstring, p5?: number) :boolean;
        static SliderFloat4(p0: cstring, p1: $Ref<number>, p2: number, p3: number, p4?: cstring, p5?: number) :boolean;
        static SliderAngle(p0: cstring, p1: $Ref<number>, p2?: number, p3?: number, p4?: cstring, p5?: number) :boolean;
        static SliderInt(p0: cstring, p1: $Ref<number>, p2: number, p3: number, p4?: cstring, p5?: number) :boolean;
        static SliderInt2(p0: cstring, p1: $Ref<number>, p2: number, p3: number, p4?: cstring, p5?: number) :boolean;
        static SliderInt3(p0: cstring, p1: $Ref<number>, p2: number, p3: number, p4?: cstring, p5?: number) :boolean;
        static SliderInt4(p0: cstring, p1: $Ref<number>, p2: number, p3: number, p4?: cstring, p5?: number) :boolean;
        static VSliderFloat(p0: cstring, p1: ImVec2, p2: $Ref<number>, p3: number, p4: number, p5?: cstring, p6?: number) :boolean;
        static VSliderInt(p0: cstring, p1: ImVec2, p2: $Ref<number>, p3: number, p4: number, p5?: cstring, p6?: number) :boolean;
        static InputText(p0: cstring, p1: $Ref<string>, p2?: number) :boolean;
        static InputTextMultiline(p0: cstring, p1: $Ref<string>, p2?: ImVec2, p3?: number) :boolean;
        static InputTextWithHint(p0: cstring, p1: cstring, p2: $Ref<string>, p3?: number) :boolean;
        static InputFloat(p0: cstring, p1: $Ref<number>, p2?: number, p3?: number, p4?: cstring, p5?: number) :boolean;
        static InputFloat2(p0: cstring, p1: $Ref<number>, p2?: cstring, p3?: number) :boolean;
        static InputFloat3(p0: cstring, p1: $Ref<number>, p2?: cstring, p3?: number) :boolean;
        static InputFloat4(p0: cstring, p1: $Ref<number>, p2?: cstring, p3?: number) :boolean;
        static InputInt(p0: cstring, p1: $Ref<number>, p2?: number, p3?: number, p4?: number) :boolean;
        static InputInt2(p0: cstring, p1: $Ref<number>, p2?: number) :boolean;
        static InputInt3(p0: cstring, p1: $Ref<number>, p2?: number) :boolean;
        static InputInt4(p0: cstring, p1: $Ref<number>, p2?: number) :boolean;
        static InputDouble(p0: cstring, p1: $Ref<number>, p2?: number, p3?: number, p4?: cstring, p5?: number) :boolean;
        static ColorEdit3(p0: cstring, p1: $Ref<number>, p2?: number) :boolean;
        static ColorEdit4(p0: cstring, p1: $Ref<number>, p2?: number) :boolean;
        static ColorPicker3(p0: cstring, p1: $Ref<number>, p2?: number) :boolean;
        static ColorPicker4(p0: cstring, p1: $Ref<number>, p2?: number, p3?: number) :boolean;
        static ColorButton(p0: cstring, p1: ImVec4, p2?: number, p3?: ImVec2) :boolean;
        static SetColorEditOptions(p0: number) :void;
        static TreeNode(p0: cstring, p1: cstring) :boolean;
        static TreeNodeEx(p0: cstring, p1: number, p2: cstring) :boolean;
        static TreePush(p0: cstring) :void;
        static TreePop() :void;
        static GetTreeNodeToLabelSpacing() :number;
        static CollapsingHeader(p0: cstring, p1: $Ref<boolean>, p2?: number) :boolean;
        static SetNextItemOpen(p0: boolean, p1?: number) :void;
        static Selectable(p0: cstring, p1: $Ref<boolean>, p2?: number, p3?: ImVec2) :boolean;
        static BeginListBox(p0: cstring, p1?: ImVec2) :boolean;
        static EndListBox() :void;
        static BeginMenuBar() :boolean;
        static EndMenuBar() :void;
        static BeginMainMenuBar() :boolean;
        static EndMainMenuBar() :void;
        static BeginMenu(p0: cstring, p1?: boolean) :boolean;
        static EndMenu() :void;
        static MenuItem(p0: cstring, p1: cstring, p2: $Ref<boolean>, p3?: boolean) :boolean;
        static BeginTooltip() :void;
        static EndTooltip() :void;
        static SetTooltip(p0: cstring) :void;
        static BeginPopup(p0: cstring, p1?: number) :boolean;
        static BeginPopupModal(p0: cstring, p1?: $Ref<boolean>, p2?: number) :boolean;
        static EndPopup() :void;
        static OpenPopup(p0: cstring, p1?: number) :void;
        static OpenPopupOnItemClick(p0?: cstring, p1?: number) :void;
        static CloseCurrentPopup() :void;
        static BeginPopupContextItem(p0?: cstring, p1?: number) :boolean;
        static BeginPopupContextWindow(p0?: cstring, p1?: number) :boolean;
        static BeginPopupContextVoid(p0?: cstring, p1?: number) :boolean;
        static IsPopupOpen(p0: cstring, p1?: number) :boolean;
        static BeginTable(p0: cstring, p1: number, p2?: number, p3?: ImVec2, p4?: number) :boolean;
        static EndTable() :void;
        static TableNextRow(p0?: number, p1?: number) :void;
        static TableNextColumn() :boolean;
        static TableSetColumnIndex(p0: number) :boolean;
        static TableSetupColumn(p0: cstring, p1?: number, p2?: number, p3?: number) :void;
        static TableSetupScrollFreeze(p0: number, p1: number) :void;
        static TableHeadersRow() :void;
        static TableHeader(p0: cstring) :void;
        static TableGetColumnCount() :number;
        static TableGetColumnIndex() :number;
        static TableGetRowIndex() :number;
        static TableGetColumnName(p0?: number) :cstring;
        static TableGetColumnFlags(p0?: number) :number;
        static TableSetColumnEnabled(p0: number, p1: boolean) :void;
        static TableSetBgColor(p0: number, p1: number, p2?: number) :void;
        static BeginTabBar(p0: cstring, p1?: number) :boolean;
        static EndTabBar() :void;
        static BeginTabItem(p0: cstring, p1?: $Ref<boolean>, p2?: number) :boolean;
        static EndTabItem() :void;
        static TabItemButton(p0: cstring, p1?: number) :boolean;
        static SetTabItemClosed(p0: cstring) :void;
        static LogToTTY(p0?: number) :void;
        static LogToFile(p0?: number, p1?: cstring) :void;
        static LogToClipboard(p0?: number) :void;
        static LogFinish() :void;
        static LogButtons() :void;
        static LogTextV(p0: cstring, p1: $Ref<number>) :void;
        static BeginDragDropSource(p0?: number) :boolean;
        static EndDragDropSource() :void;
        static BeginDragDropTarget() :boolean;
        static BeginDisabled(p0?: boolean) :void;
        static EndDisabled() :void;
        static PushClipRect(p0: ImVec2, p1: ImVec2, p2: boolean) :void;
        static PopClipRect() :void;
        static SetItemDefaultFocus() :void;
        static SetKeyboardFocusHere(p0?: number) :void;
        static IsItemHovered(p0?: number) :boolean;
        static IsItemActive() :boolean;
        static IsItemFocused() :boolean;
        static IsItemClicked(p0?: number) :boolean;
        static IsItemVisible() :boolean;
        static IsItemEdited() :boolean;
        static IsItemActivated() :boolean;
        static IsItemDeactivated() :boolean;
        static IsItemDeactivatedAfterEdit() :boolean;
        static IsItemToggledOpen() :boolean;
        static IsAnyItemHovered() :boolean;
        static IsAnyItemActive() :boolean;
        static IsAnyItemFocused() :boolean;
        static GetItemRectMin() :ImVec2;
        static GetItemRectMax() :ImVec2;
        static GetItemRectSize() :ImVec2;
        static SetItemAllowOverlap() :void;
        static GetTime() :number;
        static GetFrameCount() :number;
        static GetStyleColorName(p0: number) :cstring;
        static CalcListClipping(p0: number, p1: number, p2: $Ref<number>, p3: $Ref<number>) :void;
        static BeginChildFrame(p0: number, p1: ImVec2, p2?: number) :boolean;
        static EndChildFrame() :void;
        static CalcTextSize(p0: cstring, p1?: cstring, p2?: boolean, p3?: number) :ImVec2;
        static ColorConvertU32ToFloat4(p0: number) :ImVec4;
        static ColorConvertFloat4ToU32(p0: ImVec4) :number;
        static ColorConvertRGBtoHSV(p0: number, p1: number, p2: number, p3: $Ref<number>, p4: $Ref<number>, p5: $Ref<number>) :void;
        static ColorConvertHSVtoRGB(p0: number, p1: number, p2: number, p3: $Ref<number>, p4: $Ref<number>, p5: $Ref<number>) :void;
        static GetKeyIndex(p0: number) :number;
        static IsKeyDown(p0: number) :boolean;
        static IsKeyPressed(p0: number, p1?: boolean) :boolean;
        static IsKeyReleased(p0: number) :boolean;
        static GetKeyPressedAmount(p0: number, p1: number, p2: number) :number;
        static CaptureKeyboardFromApp(p0?: boolean) :void;
        static IsMouseDown(p0: number) :boolean;
        static IsMouseClicked(p0: number, p1?: boolean) :boolean;
        static IsMouseReleased(p0: number) :boolean;
        static IsMouseDoubleClicked(p0: number) :boolean;
        static IsMouseHoveringRect(p0: ImVec2, p1: ImVec2, p2?: boolean) :boolean;
        static IsMousePosValid(p0?: ImVec2) :boolean;
        static IsAnyMouseDown() :boolean;
        static GetMousePos() :ImVec2;
        static GetMousePosOnOpeningCurrentPopup() :ImVec2;
        static IsMouseDragging(p0: number, p1?: number) :boolean;
        static GetMouseDragDelta(p0?: number, p1?: number) :ImVec2;
        static ResetMouseDragDelta(p0?: number) :void;
        static GetMouseCursor() :number;
        static SetMouseCursor(p0: number) :void;
        static CaptureMouseFromApp(p0?: boolean) :void;
        static GetClipboardText() :cstring;
        static SetClipboardText(p0: cstring) :void;
        static LoadIniSettingsFromDisk(p0: cstring) :void;
        static LoadIniSettingsFromMemory(p0: cstring, p1?: bigint) :void;
        static SaveIniSettingsToDisk(p0: cstring) :void;
        static SaveIniSettingsToMemory(p0?: $Ref<bigint>) :cstring;
        static DebugCheckVersionAndDataLayout(p0: cstring, p1: bigint, p2: bigint, p3: bigint, p4: bigint, p5: bigint, p6: bigint) :boolean;
    }

}
